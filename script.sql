DROP PROCEDURE "SCHEMA"."VIEW_HIERARCHY";
CREATE PROCEDURE "SCHEMA"."VIEW_HIERARCHY" (IN view_name NVARCHAR(200))
    LANGUAGE SQLSCRIPT
    SQL SECURITY INVOKER
    AS
/*********BEGIN PROCEDURE SCRIPT ************/
	child_count,lvl INTEGER := 1;
BEGIN	
	DECLARE CURSOR c_1 FOR
		SELECT "BASE_OBJECT_NAME", "BASE_OBJECT_TYPE" FROM "PARENT";	
	
	TRUNCATE TABLE "FINAL";
	INSERT INTO "PARENT" SELECT DISTINCT "BASE_OBJECT_NAME", "BASE_OBJECT_TYPE", :lvl FROM "PUBLIC"."OBJECT_DEPENDENCIES" WHERE  "DEPENDENT_OBJECT_NAME" = :view_name AND "BASE_OBJECT_TYPE" IN ('VIEW','TABLE') AND "DEPENDENCY_TYPE" = 1;
	
	WHILE :child_count != 0 DO 
		
		lvl = :lvl + 1 ;
		TRUNCATE TABLE "CHILD";
		
		FOR cur_1 as c_1 DO 
			INSERT INTO "CHILD" SELECT DISTINCT "BASE_OBJECT_NAME", "BASE_OBJECT_TYPE", :lvl FROM "PUBLIC"."OBJECT_DEPENDENCIES" WHERE "DEPENDENT_OBJECT_NAME" = cur_1."BASE_OBJECT_NAME" AND "BASE_OBJECT_TYPE" IN ('VIEW','TABLE') AND "DEPENDENCY_TYPE" = 1;
		END FOR;
			
		SELECT COUNT(1) INTO child_count FROM "CHILD";
		INSERT INTO "FINAL" SELECT BASE_OBJECT_NAME, BASE_OBJECT_TYPE, :lvl FROM "PARENT";
		TRUNCATE TABLE "PARENT";
		INSERT INTO "PARENT" SELECT * FROM "CHILD";
		
	END WHILE;
	SELECT * FROM FINAL;
END;

CALL "SCHEMA"."VIEW_HIERARCHY"('VIEW_NAME');



CREATE TABLE "FINAL"("BASE_OBJECT_NAME" NVARCHAR(200), "BASE_OBJECT_TYPE" NVARCHAR(200), "LVL" INTEGER);
CREATE TABLE "PARENT"("BASE_OBJECT_NAME" NVARCHAR(200), "BASE_OBJECT_TYPE" NVARCHAR(200), "LVL" INTEGER);
CREATE TABLE "CHILD"("BASE_OBJECT_NAME" NVARCHAR(200), "BASE_OBJECT_TYPE" NVARCHAR(200), "LVL" INTEGER);

